-- 1.Создаем пустые таблицы в необходимых бд
drop table if exists buffer.shkonplace_buff;
create table if not exists buffer.shkonplace_buff
(
    shk_id    Int64,
    dt        DateTime,
    state_id  LowCardinality(String)
)
engine = Buffer('stage', 'shkonplace_log', 100, 10, 100, 10000, 100000, 10000000, 100000000);

drop table if exists stage.shkonplace_log;
create table if not exists stage.shkonplace_log
(
    shk_id    Int64,
    dt        DateTime,
    state_id  LowCardinality(String)
)
engine = MergeTree() ORDER BY shk_id;

drop table if exists current.shkonplace;
create table if not exists current.shkonplace
(
    shk_id    Int64,
    dt        DateTime,
    state_id  LowCardinality(String)
)

engine = ReplacingMergeTree(dt)
order by shk_id;

-- 2 Создаем матвью для переноса из stage слоя в current
drop view if exists stage.shkonplace_to_current;
create materialized view stage.shkonplace_to_current to current.shkonplace as
select shk_id, dt, state_id
from stage.shkonplace_log;

-- 3 Моделируем вставку данных 100 строк
INSERT INTO buffer.shkonplace_buff (shk_id, dt, state_id) VALUES
(10620136906, '2024-06-26 21:25:50', 'AIP'),
(10620136906, '2024-06-26 21:25:52', 'WIJ'),
(10620136906, '2024-06-26 21:25:50', 'WIJ'),
(10620136906, '2024-06-26 21:25:51', 'AIP'),
(10620136906, '2024-06-26 21:25:49', 'WIJ'),
(10620136906, '2024-06-26 21:25:49', 'WIJ'),
(10620136906, '2024-06-26 21:25:50', 'WIJ'),
(10620136906, '2024-06-26 21:25:49', 'WIJ'),
(10620136906, '2024-06-26 21:25:51', 'WIJ'),
(10620136906, '2024-06-26 21:25:49', 'WIJ'),
(10620136906, '2024-06-26 21:25:48', 'WIJ'),
(20291214182, '2024-06-26 21:25:49', 'AIP'),
(20291214182, '2024-06-26 21:25:48', 'WIJ'),
(20291214182, '2024-06-26 21:25:51', 'AIP'),
(20291214182, '2024-06-26 21:25:49', 'AIP'),
(20291214182, '2024-06-26 21:25:47', 'AIP'),
(20291214182, '2024-06-26 21:25:51', 'WIJ'),
(20291214182, '2024-06-26 21:25:48', 'WIJ'),
(20291214182, '2024-06-26 21:25:48', 'WIJ'),
(20291214182, '2024-06-26 21:25:51', 'WIJ'),
(20291214182, '2024-06-26 21:25:50', 'WIJ'),
(20421765178, '2024-06-26 21:25:52', 'WIJ'),
(20421765178, '2024-06-26 21:25:51', 'WIJ'),
(20421765178, '2024-06-26 21:25:48', 'WIJ'),
(20421765178, '2024-06-26 21:25:47', 'WIJ'),
(20421765178, '2024-06-26 21:25:52', 'WIJ'),
(20421765178, '2024-06-26 21:25:50', 'WIJ'),
(20421765178, '2024-06-26 21:25:47', 'WIJ'),
(20421765178, '2024-06-26 21:25:48', 'WIJ'),
(20421765178, '2024-06-26 21:25:48', 'WIJ'),
(20421765178, '2024-06-26 21:25:51', 'AIP'),
(20461539662, '2024-06-26 21:25:49', 'WIJ'),
(20461539662, '2024-06-26 21:25:48', 'WIJ'),
(20461539662, '2024-06-26 21:25:50', 'WIJ'),
(20461539662, '2024-06-26 21:25:47', 'WIJ'),
(20461539662, '2024-06-26 21:25:48', 'WIJ'),
(20461539662, '2024-06-26 21:25:51', 'WIJ'),
(20461539662, '2024-06-26 21:25:49', 'WIJ'),
(20461539662, '2024-06-26 21:25:48', 'WIJ'),
(20461539662, '2024-06-26 21:25:50', 'WIJ'),
(20461539662, '2024-06-26 21:25:48', 'ASI'),
(21125198114, '2024-06-26 21:25:50', 'AIP'),
(21125198114, '2024-06-26 21:25:50', 'WIJ'),
(21125198114, '2024-06-26 21:25:48', 'WIJ'),
(21125198114, '2024-06-26 21:25:51', 'WIJ'),
(21125198114, '2024-06-26 21:25:50', 'WIJ'),
(21125198114, '2024-06-26 21:25:48', 'WIJ'),
(21125198114, '2024-06-26 21:25:47', 'WIJ'),
(21125198114, '2024-06-26 21:25:51', 'WIJ'),
(21125198114, '2024-06-26 21:25:49', 'WIJ'),
(21125198114, '2024-06-26 21:25:47', 'WIJ'),
(21125198114, '2024-06-26 21:25:48', 'WIJ'),
(21166584355, '2024-06-26 21:25:51', 'AIP'),
(21186101181, '2024-06-26 21:25:48', 'WIJ'),
(21186101183, '2024-06-26 21:25:48', 'WIJ'),
(21186101185, '2024-06-26 21:25:50', 'WIJ'),
(21186101187, '2024-06-26 21:25:51', 'WIJ'),
(21186101189, '2024-06-26 21:25:52', 'WIJ'),
(21202300872, '2024-06-26 21:25:50', 'WIJ'),
(21211972510, '2024-06-26 21:25:49', 'WIJ'),
(21211978858, '2024-06-26 21:25:48', 'WIJ'),
(21212862112, '2024-06-26 21:25:50', 'WIJ'),
(21255704986, '2024-06-26 21:25:49', 'WIJ'),
(21255704988, '2024-06-26 21:25:51', 'WIJ'),
(21262139384, '2024-06-26 21:25:48', 'WIJ'),
(21273828782, '2024-06-26 21:25:50', 'WIJ'),
(21273828836, '2024-06-26 21:25:52', 'WIJ'),
(21274594003, '2024-06-26 21:25:47', 'WIJ'),
(21274594009, '2024-06-26 21:25:50', 'WIJ'),
(21277936922, '2024-06-26 21:25:51', 'WIJ'),
(21277936924, '2024-06-26 21:25:49', 'WIJ'),
(21297873414, '2024-06-26 21:25:48', 'WIJ'),
(21297873418, '2024-06-26 21:25:50', 'WIJ'),
(21297873422, '2024-06-26 21:25:51', 'WIJ'),
(21297873494, '2024-06-26 21:25:47', 'WIJ'),
(21333239249, '2024-06-26 21:25:48', 'WIJ'),
(21333956494, '2024-06-26 21:25:49', 'AIP'),
(21334051759, '2024-06-26 21:25:49', 'WIJ'),
(21341362940, '2024-06-26 21:25:48', 'WIJ'),
(21343287621, '2024-06-26 21:25:49', 'WIJ'),
(21344214481, '2024-06-26 21:25:48', 'WIJ'),
(21344214483, '2024-06-26 21:25:51', 'WIJ'),
(21347518000, '2024-06-26 21:25:48', 'WIJ'),
(21348921021, '2024-06-26 21:25:47', 'WIJ'),
(21361737947, '2024-06-26 21:25:47', 'AIP'),
(21361737949, '2024-06-26 21:25:50', 'AIP'),
(21408890333, '2024-06-26 21:25:47', 'WIJ'),
(21408890335, '2024-06-26 21:25:49', 'WIJ'),
(21408890337, '2024-06-26 21:25:51', 'WIJ'),
(21412379605, '2024-06-26 21:25:51', 'WIJ'),
(21412379607, '2024-06-26 21:25:48', 'WIJ'),
(21430213212, '2024-06-26 21:25:51', 'WIJ'),
(21430694830, '2024-06-26 21:25:48', 'WIJ'),
(21445140447, '2024-06-26 21:25:50', 'WIJ'),
(21445170911, '2024-06-26 21:25:49', 'WIJ'),
(21523477252, '2024-06-26 21:25:50', 'WIJ'),
(21523477254, '2024-06-26 21:25:47', 'WIJ'),
(21524060687, '2024-06-26 21:25:51', 'WIJ'),
(21524060689, '2024-06-26 21:25:49', 'WIJ'),
(21524060691, '2024-06-26 21:25:47', 'WIJ');

-- 4 Проверяем данные в буферной таблице
select *
from buffer.shkonplace_buff;

-- 5 Проверяем данные в stage таблице
select *
from stage.shkonplace_log;
-- 100 строк сырых данных

-- 6 Проверяем данные в current таблице
select *
from current.shkonplace;
-- 53 строки последних состояний по dt для каждого shk_id
